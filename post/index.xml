<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Adrian&#39;s Ramblings</title>
    <link>https://adrianherrera.github.io/post/</link>
    <description>Recent content in Posts on Adrian&#39;s Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, all rights reserved.</copyright>
    <lastBuildDate>Tue, 08 Aug 2017 11:50:51 +0200</lastBuildDate>
    
	<atom:link href="https://adrianherrera.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solving a CTF Challenge with S2E</title>
      <link>https://adrianherrera.github.io/post/google-ctf-2016/</link>
      <pubDate>Tue, 08 Aug 2017 11:50:51 +0200</pubDate>
      
      <guid>https://adrianherrera.github.io/post/google-ctf-2016/</guid>
      <description>Introduction Symbolic execution tools such as Angr and Manticore have become increasingly popular for analyzing binaries in Capture the Flag (CTF) challenges.
In this blog post I will show that we can do the same with S2E, using it to solve a reverse engineering challenge from the 2016 Google CTF. This post walks through the process of writing an S2E plugin &amp;ldquo;from first principles&amp;rdquo; to solve this challenge.
For comparison, solutions for the challenge using Angr and Manticore are also available.</description>
    </item>
    
  </channel>
</rss>